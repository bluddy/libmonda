{
  "name": "libmonda",
  "tagline": "Make OCaml native debugging awesome",
  "body": "### What is libmonda?\r\n\r\n`libmonda` is a library that provides improved support for the OCaml language in platform debuggers.  The majority of the library is designed to be independent of the particular debugger in use.  Currently the only supported debugger is gdb but it is expected that lldb support will be implemented in due course.\r\n\r\n### Installation\r\n\r\nTo use libmonda to debug OCaml programs it is necessary to have installed:\r\n* the OPAM switch `4.05.0+monda` (this currently requires adding `github.com/mshinwell/opam-repo-dev` as an OPAM remote);\r\n* the `libmonda-gdb` package (likewise).\r\n\r\nInstallation of `libmonda-gdb` will also install a bespoke version of gdb with modifications for debugging OCaml code.  This version of gdb is called using the `gdb-ocaml` command.  It is not possible to use `libmonda` with a standard version of gdb.  (The modifications to gdb will be submitted upstream in due course.)\r\n\r\n### Using gdb to debug OCaml code\r\n\r\ngdb is invoked in the same way as normal except that `gdb-ocaml` is written instead of `gdb`.  A convenient method is using the `--args` option, like so:\r\n    gdb-ocaml --args ./myprogram --hello world\r\n\r\n## Standard gdb commands\r\n\r\n# Syntax of \"print\" commands\r\n\r\nThe `print` command understands a small language of _paths_ which enables the navigation of structured OCaml values.  A path either:\r\n* starts with a module path (e.g. `Foo.Bar`) which identifies that the remainder of the path is a request for some toplevel value within the given module; or\r\n* starts with the name of a local variable or function argument currently in scope (e.g. \"myvar\").  (This includes free variables of functions captured by closures.)\r\nPaths may be continued by either:\r\n* giving the name of a record field (e.g. \".myfield\"); or\r\n* giving a numeric index (e.g. \".(4)\").\r\nNumeric indexes may be applied to:\r\n* arrays (to retrieve the nth element);\r\n* lists (to retrieve the nth element);\r\n* boxed constructed values (to retrieve the nth argument of the constructor---this works for \"traditional\" tupled constructors as well as those using inlined records);\r\n* `ref` cells (to retrieve the contents; only the index `0` is valid).\r\nSome examples of paths might be:\r\n* `Foo.Bar.myvar.(0).blah`: find the toplevel value `myvar` in the module `Foo.Bar`, extract the first component and then extract the record field named `blah`;\r\n* `arg.bar.baz`: find the local variable or argument named `arg` and then perform record field accesses `bar` then `baz`.\r\n\r\nError reporting in the debugger is currently rather primitive.  A message such as `$2 = 0` indicates that an error occurred when locating a value or traversing the given path.  Check that the name is correct and the path valid.  It can be helpful to use `info args` or `info locals` for this.\r\n\r\n## OCaml-only gdb commands\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}